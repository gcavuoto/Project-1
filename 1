class myDict(object):
    """ Implements a dictionary without using a dictionary """
    def __init__(self):
        """ initialization of your representation """
        #FILL THIS IN
        # print(self)
        self.keys = []
        self.values = []
        
    def assign(self, k, v):
        """ k (the key) and v (the value), immutable objects  """
        #FILL THIS IN
        if k in self.keys():
          self.keys[k]=v
        else:
          self.keys.append(k)
          self.values.append(v)
        
    def getval(self, k):
        """ k, immutable object  """
        #FILL THIS IN
        index = self.keys.index(k)
        return self.values[index]
        
    def delete(self, k):
        """ k, immutable object """   
        #FILL THIS IN
        index = self.keys.index(k)
        self.keys.remove(k)
        self.values.pop(index)

# def print_myDict(myDict):
#   for 
d1 = sm.myDict()
d1.assign(1,2)
d1.assign(3,4)
d1.assign(3,5)
print(d1.getval(3))
md = myDict()
md.assign(1, 2)
print(md.getval(1))
md.delete(1)
print(md.getval(1))
